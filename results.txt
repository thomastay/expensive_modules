C++ took ~12s on test_big_sparse.in
F# took ~58s on test_big_sparse.in

Update: with basically a total rewrite to imperative style, F# got down to 6.6s on test_big_sparse.in. C++ now takes ~8s (this is on Windows).
Bear in mind the C++ is not as optimized.
As I expected, the thing that takes the most time is merging the sorted lists. Optimizing this will make the code much faster.

Update: 5/5/2020
It now gets down to 5.5 seconds on Windows. I modified the code slightly, to have separation of concerns, and hash differently, but the reality is that nothing much has changed.
I also realized that the high memory usage has nothing to do with the graph traversal code, but rather comes from the graph creation code, which uses up to 65MB of space. Regular code only uses about 10MB max. The GC does collect some of the graph creation code memory, but not always, and idk if this slows down the program by making the GC have to do more work? Need to think and profile.


Update: 6/5/2020
Transitive reduction IS indeed working as expected:
Removes: 4985434 edges
However, it runs too slowly! Takes nearly 10s extra to execute the transitive reduction algorithm. 
It does make the costOfModules algorithm EXTREMELY fast, though, taking 1s to run.
So implementing cost reduction is worthwhile, but we will probably have to do it with adjacency lists...
Side note: I implemented it wrongly, and didn't realized it was wrong until later... need to write tests for the reduction function. I should also write a .out.correct file for the test_sparse and use it as a macro test case...

Update2
Got it to run at 1.3s, by implementing loop parallelism, and moving the check for adj[i, k] out of the loop - this speeds it up immensely!
Without parallelism, it runs in about 1.3s too. So the parallelism isn't helping much any longer